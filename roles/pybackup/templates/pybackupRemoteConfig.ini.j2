[pybackup]
; Profile name, used in the generated tgz, dont use spaces
profilename = '{{ item.name }}'

; dont put the date to the filename
nodate = true

; root dir to backup
{% if item.backup_dir is defined and item.backup_dir != ""  %}
rootdir = '{{ item.backup_dir  |  regex_replace('\\/$', '')}}/'
{% endif %}

; follow symbolic links when copying files
{% if item.follow_symlinks is defined and item.follow_symlinks %}
followsymlinks = 'true'
{% else %}
followsymlinks = 'false'
{% endif %}

; destination of the backup files
;important: the destination folder only contains backup files from this job

destination = '{{ pybackup_remote_tmp }}/ansible_backup_{{ item.name }}/backup/'

tmpdir =  '{{ pybackup_remote_tmp }}/ansible_backup_{{ item.name }}/tmp/'

; not yet implemented
; excludes = ''

{% if item.backup_mysql is defined and item.backup_mysql != "" %}
;mysql database name to backup
mysqldb = '{{ item.backup_mysql }}'
{% else %}
;mysql database name to backup
;mysqldb =
{% endif%}

; how many older copies should be keeped
keepold = "1"

;change ownership of the resulting file
chown = "{{ ansible_user }}"
chmod = "0700"

; fallback mysql conection data
;[client]
;user = "username"
;password = "password"
